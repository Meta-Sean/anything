{
  
    
        "post0": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://meta-sean.github.io/anything/markdown/2022/08/22/tester.html",
            "relUrl": "/markdown/2022/08/22/tester.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Hotdog or Not Hotdog",
            "content": "WATCH: @EmilyChangTV chats w/ Jian-Yang about his &quot;Not Hotdog&quot; app. Download it today (really): https://t.co/7N6a1Asfge #SiliconValleyHBO pic.twitter.com/99TBhaiHYk . &mdash; Tech At Bloomberg (@TechAtBloomberg) May 15, 2017 . # This code is only here to check that your internet is enabled. It doesn&#39;t do anything else. # Here&#39;s a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367 import socket,warnings try: socket.setdefaulttimeout(1) socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((&#39;1.1.1.1&#39;, 53)) except socket.error as ex: raise Exception(&quot;STOP: No internet. Click &#39;&gt;|&#39; in top right and set &#39;Internet&#39; switch to on&quot;) . # `!pip install -Uqq &lt;libraries&gt;` upgrades to the latest version of &lt;libraries&gt; # NB: You can safely ignore any warnings or errors pip spits out about running as root or incompatibilities import os iskaggle = os.environ.get(&#39;KAGGLE_KERNEL_RUN_TYPE&#39;, &#39;&#39;) if iskaggle: !pip install -Uqq fastai duckduckgo_search . In 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of this XKCD joke: . But today, we can do exactly that, in just a few minutes, using entirely free resources! . The basic steps we&#39;ll take are: . Use DuckDuckGo to search for images of &quot;hot dogs&quot; | Use DuckDuckGo to search for images of &quot;not hot dogs&quot; aka &quot;pizza&quot; | Fine-tune a pretrained neural network to recognise these two groups | Try running this model on a picture of a bird and see if it works. | Step 1: Download images of hot dog and not hotdog &#39;pizza&#39; . #import shutil #hutil.rmtree(&quot;/kaggle/working/hotdog_or_not&quot;) #shutil.rmtree(&quot;/kaggle/working/&quot;) . from duckduckgo_search import ddg_images from fastcore.all import * def search_images(term, max_images=30): print(f&quot;Searching for &#39;{term}&#39;&quot;) return L(ddg_images(term, max_results=max_images)).itemgot(&#39;image&#39;) . Let&#39;s start by searching for a bird photo and seeing what kind of result we get. We&#39;ll start by getting URLs from a search: . # If you get a JSON error, just try running it again (it may take a couple of tries). urls = search_images(&#39;hotdog&#39;, max_images=1) urls[0] . ...and then download a URL and take a look at it: . from fastdownload import download_url dest = &#39;hotdog.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . Now let&#39;s do the same with &quot;pizza photos&quot;: . download_url(search_images(&#39;pizza&#39;, max_images=1)[0], &#39;pizza.jpg&#39;, show_progress=False) Image.open(&#39;pizza.jpg&#39;).to_thumb(256,256) . Our searches seem to be giving reasonable results, so let&#39;s grab a few examples of each of &quot;hotdog&quot; and &quot;pizza&quot; photos, and save each group of photos to a different folder (I&#39;m also trying to grab a range of lighting conditions here): . searches = &#39;pizza&#39;,&#39;hotdog&#39; path = Path(&#39;hotdog_or_not&#39;) from time import sleep for o in searches: dest = (path/o) dest.mkdir(exist_ok=True, parents=True) download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) # Pause between searches to avoid over-loading server download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) resize_images(path/o, max_size=400, dest=path/o) . Step 2: Train our model . Some photos might not download correctly which could cause our model training to fail, so we&#39;ll remove them: . failed = verify_images(get_image_files(path)) failed.map(Path.unlink) len(failed) . To train a model, we&#39;ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model -- not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it: . dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(path, bs=32) dls.show_batch(max_n=8) . Here what each of the DataBlock parameters means: . blocks=(ImageBlock, CategoryBlock), . The inputs to our model are images, and the outputs are categories (in this case, &quot;hotdog&quot; or &quot;pizza&quot;). . get_items=get_image_files, . To find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path). . splitter=RandomSplitter(valid_pct=0.2, seed=42), . Split the data into training and validation sets randomly, using 20% of the data for the validation set. . get_y=parent_label, . The labels (y values) is the name of the parent of each file (i.e. the name of the folder they&#39;re in, which will be bird or forest). . item_tfms=[Resize(192, method=&#39;squish&#39;)] . Before training, resize each image to 192x192 pixels by &quot;squishing&quot; it (as opposed to cropping it). . Now we&#39;re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds...) . fastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we&#39;ll use that. . learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . Generally when I run this I see 100% accuracy on the validation set (although it might vary a bit from run to run). . &quot;Fine-tuning&quot; a model means that we&#39;re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it&#39;s important, check out the free fast.ai course. . Step 3: Use our model (and build your own!) . Let&#39;s see what our model thinks about that bird we downloaded at the start: . is_hotdog,_,probs = learn.predict(PILImage.create(&#39;hotdog.jpg&#39;)) print(f&quot;This is a: {is_hotdog}.&quot;) print(f&quot;Probability it&#39;s a hotdog: {probs[0]:.4f}&quot;) . Good job, resnet18. :) . So, as you see, in the space of a few years, creating computer vision classification models has gone from &quot;so hard it&#39;s a joke&quot; to &quot;trivially easy and free&quot;! . It&#39;s not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including creating amazing artworks, and explaining jokes. It&#39;s moving so fast that even experts in the field have trouble predicting how it&#39;s going to impact society in the coming years. . One thing is clear -- it&#39;s important that we all do our best to understand this technology, because otherwise we&#39;ll get left behind! . Now it&#39;s your turn. Click &quot;Copy &amp; Edit&quot; and try creating your own image classifier using your own image searches! . If you enjoyed this, please consider clicking the &quot;upvote&quot; button in the top-right -- it&#39;s very encouraging to us notebook authors to know when people appreciate our work. .",
            "url": "https://meta-sean.github.io/anything/fastpages/jupyter/2022/08/22/not-hotdog.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/not-hotdog.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "# Explain the different trading facilities and the insights we are gleaning from this information # Add more exchanges and trading facilites # Create Column &#39;Ratio&#39; between short volume and total volume # Grab total volume from all exchanges to know how much information is missing # short is long - the more short sales - indication of dealers filling long buyers # implying more demand for the stock from the buy side # Try- except for edge case with no date data # Fixed edgx data and create cleaner function # Lets see if we can download the daily volume reports from the web # try FINRA first import requests import pandas as pd def finra_data_download(facilities, dates): &quot;&quot;&quot; function to download FINRA short sell volume data from different trading facilities. Parameters: facility - list of (str) identifier of trading facility you want to get data from dates - list of (str) dates you want to grab data from Returns: Downloaded text files &quot;&quot;&quot; for facility in facilities: for date in dates: url = f&quot;https://cdn.finra.org/equity/regsho/daily/{facility}shvol{date}.txt&quot; r = requests.get(url) with open(f&#39;{facility}shvol{date}.txt&#39;, &#39;wb&#39;) as f: f.write(r.content) # set-up facilities = [&#39;FNQC&#39;,&#39;FNSQ&#39;, &#39;FNYX&#39;] dates = [&#39;20220803&#39;, &#39;20220804&#39;, &#39;20220805&#39;, &#39;20220808&#39;, &#39;20220809&#39;, &#39;20220810&#39;, &#39;20220811&#39;] # call function and check downloads finra_data_download(facilities, dates) def create_filelist(facilities, dates): &quot;&quot;&quot; helper function to create file list &quot;&quot;&quot; file_arr = [] for facility in facilities: for date in dates: file_arr.append(f&quot;{facility}shvol{date}.txt&quot;) return file_arr # Call helper files function to get list of files files = create_filelist(facilities, dates) def finra_dataframe(files): &quot;&quot;&quot; Takes FINRA short sell volume data and combines the list of files passed in and creates a pandas DateFrame Parameters: files: list of files &quot;&quot;&quot; df = pd.DataFrame() for file in files: temp = pd.read_csv(file, sep=&quot;|&quot;) df = df.append(temp) return df FINRA_df = finra_dataframe(files) . import requests, zipfile from io import BytesIO #def edgx_data_download(dates): files = [] dates = [&#39;20220803&#39;, &#39;20220804&#39;, &#39;20220805&#39;, &#39;20220808&#39;, &#39;20220809&#39;, &#39;20220810&#39;, &#39;20220811&#39;] for date in dates: url = f&#39;https://www.cboe.com/us/equities/market_statistics/short_sale/2022/08/EDGXshvol{date}.txt.zip-dl?mkt=edgx&#39; r = requests.get(url) print(r) #Grab the filename filename = url.split(&#39;/&#39;)[-1] filename_txt = filename.split(&#39;.zip&#39;)[0] files.append(filename_txt) # Write file to local storage # with open(filename, &#39;wb&#39;) as output_file: # output_file.write(r.content) # print(&#39;Download Complete&#39;) zipf = zipfile.ZipFile(BytesIO(r.content)) zipf.extractall() dates = [&#39;20220803&#39;, &#39;20220804&#39;, &#39;20220805&#39;, &#39;20220808&#39;, &#39;20220809&#39;, &#39;20220810&#39;, &#39;20220811&#39;] #files = edgx_data_download(dates) . &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; . EDGX_df = finra_dataframe(files) EDGX_df . Date Symbol Short Volume Total Volume Market Center . 0 20220803 | A | 22241 | 31747 | K | . 1 20220803 | AA | 221289 | 435971 | K | . 2 20220803 | AAA | 1 | 1 | K | . 3 20220803 | AAAU | 42609 | 47509 | K | . 4 20220803 | AAC | 3200 | 12657 | K | . ... ... | ... | ... | ... | ... | . 9298 20220811 | ZWS | 11342 | 31379 | K | . 9299 20220811 | ZY | 161826 | 259203 | K | . 9300 20220811 | ZYME | 37481 | 75718 | K | . 9301 20220811 | ZYNE | 12270 | 17312 | K | . 9302 20220811 | ZYXI | 9384 | 42113 | K | . 64866 rows × 5 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; FINRA_df . Date Symbol ShortVolume ShortExemptVolume TotalVolume Market . 0 2022-08-03 | A | 275.0 | 0.0 | 343.0 | B | . 1 2022-08-03 | AA | 1679.0 | 0.0 | 3237.0 | B | . 2 2022-08-03 | AADI | 42.0 | 0.0 | 50.0 | B | . 3 2022-08-03 | AAL | 16824.0 | 0.0 | 33669.0 | B | . 4 2022-08-03 | AAMC | 166.0 | 0.0 | 166.0 | B | . ... ... | ... | ... | ... | ... | ... | . 7954 2022-08-11 | ZWS | 793.0 | 0.0 | 1761.0 | N | . 7955 2022-08-11 | ZY | 250754.0 | 5319.0 | 508982.0 | N | . 7956 2022-08-11 | ZYME | 40984.0 | 0.0 | 107648.0 | N | . 7957 2022-08-11 | ZYNE | 32482.0 | 4023.0 | 90637.0 | N | . 7958 2022-08-11 | ZYXI | 13308.0 | 0.0 | 18198.0 | N | . 148298 rows × 6 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; FINRA_df = FINRA_df.dropna() FINRA_df[&#39;Date&#39;] = pd.to_datetime(FINRA_df[&quot;Date&quot;], format=&#39;%Y%m%d&#39;) FINRA_df = FINRA_df.dropna() EDGX_df[&#39;Date&#39;] = pd.to_datetime(EDGX_df[&quot;Date&quot;], format=&#39;%Y%m%d&#39;) EDGX_df . Date Symbol Short Volume Total Volume Market Center . 0 2022-08-03 | A | 22241 | 31747 | K | . 1 2022-08-03 | AA | 221289 | 435971 | K | . 2 2022-08-03 | AAA | 1 | 1 | K | . 3 2022-08-03 | AAAU | 42609 | 47509 | K | . 4 2022-08-03 | AAC | 3200 | 12657 | K | . ... ... | ... | ... | ... | ... | . 9298 2022-08-11 | ZWS | 11342 | 31379 | K | . 9299 2022-08-11 | ZY | 161826 | 259203 | K | . 9300 2022-08-11 | ZYME | 37481 | 75718 | K | . 9301 2022-08-11 | ZYNE | 12270 | 17312 | K | . 9302 2022-08-11 | ZYXI | 9384 | 42113 | K | . 64866 rows × 5 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; ticker = input(&quot;What ticker should we look up? &quot;) #edgx_ticker_indexes = (EDGX_df.index[EDGX_df[&#39;Symbol&#39;]==ticker].tolist()) finra_ticker_indexes = (FINRA_df.index[FINRA_df[&#39;Symbol&#39;]==ticker].tolist()) edgx_ticker_indexes = (EDGX_df.index[EDGX_df[&#39;Symbol&#39;]==ticker].tolist()) . What ticker should we look up? HLBZ . finra_ticker_indexes edgx_ticker_indexes . [3907, 3922, 3924, 3960, 3934, 3964, 3964] . finra_dict = {} for index in finra_ticker_indexes: finra_dict[&#39;Date&#39;] = FINRA_df[&#39;Date&#39;][finra_ticker_indexes] #FINRA_df[&#39;Symbol&#39;][finra_ticker_indexes] finra_dict[&#39;ShortVolume&#39;] = FINRA_df[&#39;ShortVolume&#39;][finra_ticker_indexes] #FINRA_df[&#39;ShortExemptVolume&#39;][finra_ticker_indexes] finra_dict[&#39;TotalVolume&#39;] = FINRA_df[&#39;TotalVolume&#39;][finra_ticker_indexes] #FINRA_df[&#39;Market&#39;][finra_ticker_indexes] finra_dict edgx_dict = {} for index in edgx_ticker_indexes: edgx_dict[&#39;Date&#39;] = EDGX_df[&#39;Date&#39;][edgx_ticker_indexes] #FINRA_df[&#39;Symbol&#39;][finra_ticker_indexes] edgx_dict[&#39;ShortVolume&#39;] = EDGX_df[&#39;Short Volume&#39;][edgx_ticker_indexes] #FINRA_df[&#39;ShortExemptVolume&#39;][finra_ticker_indexes] edgx_dict[&#39;TotalVolume&#39;] = EDGX_df[&#39;Total Volume&#39;][edgx_ticker_indexes] #FINRA_df[&#39;Market&#39;][finra_ticker_indexes] edgx_dict . {&#39;Date&#39;: 3907 2022-08-03 3907 2022-08-04 3907 2022-08-05 3907 2022-08-08 3907 2022-08-09 3907 2022-08-10 3907 2022-08-11 3922 2022-08-03 3922 2022-08-04 3922 2022-08-05 3922 2022-08-08 3922 2022-08-09 3922 2022-08-10 3922 2022-08-11 3924 2022-08-03 3924 2022-08-04 3924 2022-08-05 3924 2022-08-08 3924 2022-08-09 3924 2022-08-10 3924 2022-08-11 3960 2022-08-03 3960 2022-08-04 3960 2022-08-05 3960 2022-08-08 3960 2022-08-09 3960 2022-08-10 3960 2022-08-11 3934 2022-08-03 3934 2022-08-04 3934 2022-08-05 3934 2022-08-08 3934 2022-08-09 3934 2022-08-10 3934 2022-08-11 3964 2022-08-03 3964 2022-08-04 3964 2022-08-05 3964 2022-08-08 3964 2022-08-09 3964 2022-08-10 3964 2022-08-11 3964 2022-08-03 3964 2022-08-04 3964 2022-08-05 3964 2022-08-08 3964 2022-08-09 3964 2022-08-10 3964 2022-08-11 Name: Date, dtype: datetime64[ns], &#39;ShortVolume&#39;: 3907 120970 3907 34382 3907 164 3907 13903 3907 36490 3907 1 3907 12897 3922 11139 3922 230185 3922 0 3922 0 3922 6307 3922 2043 3922 300 3924 79747 3924 24362 3924 428948 3924 4199 3924 1 3924 2576 3924 188 3960 5130 3960 225 3960 1220 3960 14616040 3960 256 3960 245012 3960 1822 3934 182609 3934 1034 3934 27394 3934 581 3934 9823316 3934 25147 3934 10 3964 98297 3964 42151 3964 1897 3964 23087 3964 797 3964 4786983 3964 1325359 3964 98297 3964 42151 3964 1897 3964 23087 3964 797 3964 4786983 3964 1325359 Name: Short Volume, dtype: int64, &#39;TotalVolume&#39;: 3907 154007 3907 77267 3907 743 3907 37252 3907 102082 3907 180 3907 28391 3922 17212 3922 339717 3922 9 3922 100 3922 18616 3922 3403 3922 301 3924 88429 3924 34865 3924 699228 3924 4566 3924 125 3924 6313 3924 512 3960 8509 3960 635 3960 1778 3960 21235909 3960 1384 3960 397808 3960 1944 3934 246667 3934 1255 3934 115967 3934 1292 3934 16180412 3934 90641 3934 10 3964 169096 3964 63834 3964 7152 3964 35298 3964 2162 3964 7191856 3964 1981293 3964 169096 3964 63834 3964 7152 3964 35298 3964 2162 3964 7191856 3964 1981293 Name: Total Volume, dtype: int64} . FINRA_ticker_df = pd.DataFrame(finra_dict) FINRA_ticker_df = FINRA_ticker_df.set_index(&#39;Date&#39;) EDGX_ticker_df = pd.DataFrame(edgx_dict) EDGX_ticker_df = EDGX_ticker_df.set_index(&#39;Date&#39;) . EDGX_ticker_df . ShortVolume TotalVolume . Date . 2022-08-03 120970 | 154007 | . 2022-08-04 34382 | 77267 | . 2022-08-05 164 | 743 | . 2022-08-08 13903 | 37252 | . 2022-08-09 36490 | 102082 | . 2022-08-10 1 | 180 | . 2022-08-11 12897 | 28391 | . 2022-08-03 11139 | 17212 | . 2022-08-04 230185 | 339717 | . 2022-08-05 0 | 9 | . 2022-08-08 0 | 100 | . 2022-08-09 6307 | 18616 | . 2022-08-10 2043 | 3403 | . 2022-08-11 300 | 301 | . 2022-08-03 79747 | 88429 | . 2022-08-04 24362 | 34865 | . 2022-08-05 428948 | 699228 | . 2022-08-08 4199 | 4566 | . 2022-08-09 1 | 125 | . 2022-08-10 2576 | 6313 | . 2022-08-11 188 | 512 | . 2022-08-03 5130 | 8509 | . 2022-08-04 225 | 635 | . 2022-08-05 1220 | 1778 | . 2022-08-08 14616040 | 21235909 | . 2022-08-09 256 | 1384 | . 2022-08-10 245012 | 397808 | . 2022-08-11 1822 | 1944 | . 2022-08-03 182609 | 246667 | . 2022-08-04 1034 | 1255 | . 2022-08-05 27394 | 115967 | . 2022-08-08 581 | 1292 | . 2022-08-09 9823316 | 16180412 | . 2022-08-10 25147 | 90641 | . 2022-08-11 10 | 10 | . 2022-08-03 98297 | 169096 | . 2022-08-04 42151 | 63834 | . 2022-08-05 1897 | 7152 | . 2022-08-08 23087 | 35298 | . 2022-08-09 797 | 2162 | . 2022-08-10 4786983 | 7191856 | . 2022-08-11 1325359 | 1981293 | . 2022-08-03 98297 | 169096 | . 2022-08-04 42151 | 63834 | . 2022-08-05 1897 | 7152 | . 2022-08-08 23087 | 35298 | . 2022-08-09 797 | 2162 | . 2022-08-10 4786983 | 7191856 | . 2022-08-11 1325359 | 1981293 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; finra_short_volume = FINRA_ticker_df.groupby([&#39;Date&#39;]).ShortVolume.sum() finra_total_volume = FINRA_ticker_df.groupby([&#39;Date&#39;]).TotalVolume.sum() edgx_short_volume = EDGX_ticker_df.groupby([&#39;Date&#39;]).ShortVolume.sum() edgx_total_volume = EDGX_ticker_df.groupby([&#39;Date&#39;]).TotalVolume.sum() . finra_short_volume_df = pd.DataFrame(finra_short_volume) finra_total_volume_df = pd.DataFrame(finra_total_volume) finra_merged_df = pd.merge(finra_short_volume_df, finra_total_volume_df, how=&#39;outer&#39;, on=&#39;Date&#39;) #merged_df[&#39;Ratio&#39;] = merged_df[&#39;ShortVolume&#39;] / merged_df[&#39;TotalVolume&#39;] # Can use apply method as well finra_merged_df[&#39;Ratio&#39;] = finra_merged_df.apply(lambda row: row.ShortVolume / row.TotalVolume, axis=1) edgx_short_volume_df = pd.DataFrame(edgx_short_volume) edgx_total_volume_df = pd.DataFrame(edgx_total_volume) edgx_merged_df = pd.merge(edgx_short_volume_df, edgx_total_volume_df, how=&#39;outer&#39;, on=&#39;Date&#39;) #merged_df[&#39;Ratio&#39;] = merged_df[&#39;ShortVolume&#39;] / merged_df[&#39;TotalVolume&#39;] # Can use apply method as well edgx_merged_df[&#39;Ratio&#39;] = edgx_merged_df.apply(lambda row: row.ShortVolume / row.TotalVolume, axis=1) edgx_merged_df . ShortVolume TotalVolume Ratio . Date . 2022-08-03 596189 | 853016 | 0.698919 | . 2022-08-04 374490 | 581407 | 0.644110 | . 2022-08-05 461520 | 832029 | 0.554692 | . 2022-08-08 14680897 | 21349715 | 0.687639 | . 2022-08-09 9867964 | 16306943 | 0.605139 | . 2022-08-10 9848745 | 14882057 | 0.661787 | . 2022-08-11 2665935 | 3993744 | 0.667528 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Cool so what the point of all this scraping and cleaning? The idea here is that we are interested in the ratio of short volume and total volume. A higher ratio indicates more buying pressure and a lower ratio indicates less buying pressure. Sounds confusing...? It&#39;s a little counter intuitive, but has to do with dealers filling orders, didn&#39;t read the research paper anon?.... not gonna make it, always read the docs anon. ** Important to note here this is only data from the facilities we scraped, understanding the market micro structure can give you better insights to if this information is valuable or not. Uninformed flow? Toxic Flow? Can look at the overall daily volume and see how much order flow is missing from the data. . merged_df.to_csv(&quot;FINRA-TRF-SIGA.csv&quot;) . From Aug 03 to Aug 10 we have seen a decline in the short/total volume in SIGA from these trading facilites, lets look at the daily stock chart. ** this is a fun 7 day example not an actual trading edge, blahblahblah law of large numbers... edge can be simple or emerge from a Lollapalooza effect multiple factors reiforcing each other... . merged_df.plot.line(y=[&#39;Ratio&#39;], figsize=(10,6)) #EDGX_ticker_df.plot.line(y=[&#39;Short Volume&#39;, &#39;Total Volume&#39;], figsize=(10,6)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f890c5123d0&gt; . . Looks pretty inconclusive bruv, able to hold up while &#39;buying pressure&#39; fades, not sure what that would &#39;indicate&#39;, even tho doesn&#39;t look like a significant correlation exists still important to note correlation != causation. . merged_df.plot(kind=&#39;area&#39;, stacked=False, figsize=(9,6)) #EDGX_ticker_df.plot(kind=&#39;area&#39;, stacked=False, figsize=(9,6)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f890c457f50&gt; . merged_df.plot(kind=&#39;barh&#39;, figsize=(10,6), ylabel=&#39;Volume&#39;) #EDGX_ticker_df.plot(kind=&#39;barh&#39;, figsize=(10,6), ylabel=&#39;Volume&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f890c3d8f90&gt; .",
            "url": "https://meta-sean.github.io/anything/2022/08/22/Short-Sales-Daily-Reports.html",
            "relUrl": "/2022/08/22/Short-Sales-Daily-Reports.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://meta-sean.github.io/anything/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://meta-sean.github.io/anything/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://meta-sean.github.io/anything/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://meta-sean.github.io/anything/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}