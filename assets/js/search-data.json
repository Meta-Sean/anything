{
  
    
        "post0": {
            "title": "Lesson 3 / Chapter 4 questions",
            "content": "How is a grayscale image represented on a computer? How about a color image? . Images are represented by arrays of pixels values representing content for the image | Greyscale values range from 0-255, from white-black | . How are the files and folders in the MNIST_SAMPLE dataset structured? Why? . Train &amp; Valid -&gt; 3 &amp; 7 | To test our model on out of sample data | . Explain how the &quot;pixel similarity&quot; approach to classifying digits works. . Create an archetype for the class we want to identify (Defined as the pixel wise mean of all the values in the training set) | Calculate the pixel mean wise absolute difference -&gt; classify image based upon lowest distance | . What is a list comprehension? Create one now that selects odd numbers from a list and doubles them. . odd_double = [x * 2 for x in [1,2,3,4] if x % 2 == 0 ] odd_double . [4, 8] . What is a &quot;rank-3 tensor&quot;? . Rank is the dimensionality of the tensor | The easiest way to identify the dimensionality is the number of indices you would need to reference a number within a tensor | a &quot;rank-3 tensor&quot; is a cuboid or stack of matrices | . What is the difference between tensor rank and shape? How do you get the rank from the shape? . Rank is the number of axis or dimensions in a tensor while shape is the size of each axis of a tensor. | . How do you get the rank from the shape? . The length of the tensor&#39;s shape is its rank. | . What are RMSE and L1 norm? . Root Mean Squared Error aka the L2 norm, and Mean absolute difference aka L1 norm, are two commonly used methods of measuring distance, focusing on the magnitudes of the differences. | . How can you apply a calculation on thousands of numbers at once, many thousands of times faster than a Python loop? . Pytorch and fastai libraries utilize C and CUDA to provide these | . Create a 3×3 tensor or array containing the numbers from 1 to 9. Double it. Select the bottom-right four numbers. . What is broadcasting? . dimension matching to allow operations, PyTorch implements these features to make it easier to perform | . Are metrics generally calculated using the training set, or the validation set? Why? . Validation set, you want to test on out of sample data to see how the model will perform. | . What is SGD? . Stochastic Gradient Decent is the process we use to traverse a function to find the local minimum for space. | . Why does SGD use mini-batches? . computationally efficient | . What are the seven steps in SGD for machine learning? . Initialize the parameters | Calculate the predictions | Calculate the loss | Calculate the gradients | Step the weights | Repeat the process | Stop | . How do we initialize the weights in a model? . Randomness is recommended | . What is &quot;loss&quot;? . A loss is a function that measures your predictions versus the results of the data, large deviations would indicate a large loss while the opposite would also be true. | . Why can&#39;t we always use a high learning rate? . A high learning rate might skip over the minima for our loss space, while fast and computationally less expensive, it may be useful to dynamically adjust your step ** might be explaining step size fix later | . What is a &quot;gradient&quot;? . The first derivative of the loss function | . Do you need to know how to calculate gradients yourself? . No we use our handy tools provided by PyTorch, but it is helpful to understand whats happening under the hood. | . Why can&#39;t we use accuracy as a loss function? . A loss for binomial outcomes (0, 1) would have create a loss function with a derivative 0 | We need to be able to turn the dials and knobs on the weights and see the effect on the predictions | . Draw the sigmoid function. What is special about its shape? . # plot_function(torch.sigmoid, title=&#39;Sigmoid&#39;, min=-4, max=4) . What is the difference between a loss function and a metric? . The metric is the accuracy of the actual result we want to achieve, the loss tells us how wel | . What is the function to calculate new weights using a learning rate? . The optimizer step method | . What does the DataLoader class do? . Takes any python collection and turns it into an iterator over many batches. | . Write pseudocode showing the basic steps taken in each epoch for SGD. . # pred = model(x) # loss = loss_func(pred, y) # loss.backward() # parameters -= parameters.grad * lr . Create a function that, if passed two arguments [1,2,3,4] and &#39;abcd&#39;, returns [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;), (4, &#39;d&#39;)]. What is special about that output data structure? . def create_tuple(a,b): return list(zip(a,b)) . What does view do in PyTorch? . Changes the shape of the tensor without changing its content | . What are the &quot;bias&quot; parameters in a neural network? Why do we need them? . The margin or padding on the for our output, keeps our model from predicting a zero value | . What does the @ operator do in Python? . Matrix multiplication | . What does the backward method do? . Return the gradients | . Why do we have to zero the gradients? . To avoid adding the previously stored gradient to the current gradient | . What information do we have to pass to Learner? . DataLoader, the model, optimization function, and the loss function | . Show Python or pseudocode for the basic steps of a training loop. . Show Python or pseudocode for the basic steps of a training loop. def train_epoch(model, lr, params): for xb, yb in dl: calc_grad(xb, yb, model) for p in params: p.data -= p.grad*lr p.grad.zero_() for i in range(20): train_epoch(model, lr, params) . What is &quot;ReLU&quot;? Draw a plot of it for values from -2 to +2. . Rectified Linear Unit, basically just replaces any negative numbers with 0s in a linear function | . What is an &quot;activation function&quot;? . function that adds non-linearity to our model to decouple each linear equation from the rest, allowing for more complex functions, see universal approximation theorem | . What&#39;s the difference between F.relu and nn.ReLU? . Python function versus a PyTorch module. Can be called as a function | . The universal approximation theorem shows that any function can be approximated as closely as needed using just one nonlinearity. So why do we normally use more? . Allows for deeper models with less parameters | .",
            "url": "https://meta-sean.github.io/anything/fastpages/jupyter/2022/08/27/lesson-3.html",
            "relUrl": "/fastpages/jupyter/2022/08/27/lesson-3.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Zeroth Lecture",
            "content": "Zeroth Lecture . Meta-Learning and Set-up . This lecture was super insightful and contained some awesome tricks and tools to suceed in the practical deep learning course. . The biggest take away and process I will attempt to follow is this how to: . watch Lecture | run notebook &amp; experiment | reproduce results | repeat with different dataset | . In addition to reviewing and reflecting on the information in flashcard (aiquizzes.com), and writting this blog! . Really look forward to taking MIT’s missing semester course covering: . code concepts | editor | git &amp; gh | ssh / Linux | . Speaking of linux and ssh, towards the end of the lesson we got a look at spinning up a AWS server to get some juicy GPU’s to help us build our models in the future. I’ve fooled around with a rasberry-pi in the past but besides that have little experience with rsa, ssh, and managing remote systems. Feel like a big hackerman .",
            "url": "https://meta-sean.github.io/anything/markdown/2022/08/25/zeroth.html",
            "relUrl": "/markdown/2022/08/25/zeroth.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Hotdog or Not Hotdog",
            "content": "WATCH: @EmilyChangTV chats w/ Jian-Yang about his &quot;Not Hotdog&quot; app. Download it today (really): https://t.co/7N6a1Asfge #SiliconValleyHBO pic.twitter.com/99TBhaiHYk . &mdash; Tech At Bloomberg (@TechAtBloomberg) May 15, 2017 . # This code is only here to check that your internet is enabled. It doesn&#39;t do anything else. # Here&#39;s a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367 import socket,warnings try: socket.setdefaulttimeout(1) socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((&#39;1.1.1.1&#39;, 53)) except socket.error as ex: raise Exception(&quot;STOP: No internet. Click &#39;&gt;|&#39; in top right and set &#39;Internet&#39; switch to on&quot;) . # `!pip install -Uqq &lt;libraries&gt;` upgrades to the latest version of &lt;libraries&gt; # NB: You can safely ignore any warnings or errors pip spits out about running as root or incompatibilities import os iskaggle = os.environ.get(&#39;KAGGLE_KERNEL_RUN_TYPE&#39;, &#39;&#39;) if iskaggle: !pip install -Uqq fastai duckduckgo_search . In 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of this XKCD joke: . But today, we can do exactly that, in just a few minutes, using entirely free resources! . The basic steps we&#39;ll take are: . Use DuckDuckGo to search for images of &quot;hot dogs&quot; | Use DuckDuckGo to search for images of &quot;not hot dogs&quot; aka &quot;pizza&quot; | Fine-tune a pretrained neural network to recognise these two groups | Try running this model on a picture of a bird and see if it works. | Step 1: Download images of hot dog and not hotdog &#39;pizza&#39; . #import shutil #hutil.rmtree(&quot;/kaggle/working/hotdog_or_not&quot;) #shutil.rmtree(&quot;/kaggle/working/&quot;) . from duckduckgo_search import ddg_images from fastcore.all import * def search_images(term, max_images=30): print(f&quot;Searching for &#39;{term}&#39;&quot;) return L(ddg_images(term, max_results=max_images)).itemgot(&#39;image&#39;) . Let&#39;s start by searching for a bird photo and seeing what kind of result we get. We&#39;ll start by getting URLs from a search: . # If you get a JSON error, just try running it again (it may take a couple of tries). urls = search_images(&#39;hotdog&#39;, max_images=1) urls[0] . ...and then download a URL and take a look at it: . from fastdownload import download_url dest = &#39;hotdog.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . Now let&#39;s do the same with &quot;pizza photos&quot;: . download_url(search_images(&#39;pizza&#39;, max_images=1)[0], &#39;pizza.jpg&#39;, show_progress=False) Image.open(&#39;pizza.jpg&#39;).to_thumb(256,256) . Our searches seem to be giving reasonable results, so let&#39;s grab a few examples of each of &quot;hotdog&quot; and &quot;pizza&quot; photos, and save each group of photos to a different folder (I&#39;m also trying to grab a range of lighting conditions here): . searches = &#39;pizza&#39;,&#39;hotdog&#39; path = Path(&#39;hotdog_or_not&#39;) from time import sleep for o in searches: dest = (path/o) dest.mkdir(exist_ok=True, parents=True) download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) # Pause between searches to avoid over-loading server download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) download_images(dest, urls=search_images(f&#39;{o}&#39;)) sleep(10) resize_images(path/o, max_size=400, dest=path/o) . Step 2: Train our model . Some photos might not download correctly which could cause our model training to fail, so we&#39;ll remove them: . failed = verify_images(get_image_files(path)) failed.map(Path.unlink) len(failed) . To train a model, we&#39;ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model -- not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it: . dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(path, bs=32) dls.show_batch(max_n=8) . Here what each of the DataBlock parameters means: . blocks=(ImageBlock, CategoryBlock), . The inputs to our model are images, and the outputs are categories (in this case, &quot;hotdog&quot; or &quot;pizza&quot;). . get_items=get_image_files, . To find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path). . splitter=RandomSplitter(valid_pct=0.2, seed=42), . Split the data into training and validation sets randomly, using 20% of the data for the validation set. . get_y=parent_label, . The labels (y values) is the name of the parent of each file (i.e. the name of the folder they&#39;re in, which will be bird or forest). . item_tfms=[Resize(192, method=&#39;squish&#39;)] . Before training, resize each image to 192x192 pixels by &quot;squishing&quot; it (as opposed to cropping it). . Now we&#39;re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds...) . fastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we&#39;ll use that. . learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . Generally when I run this I see 100% accuracy on the validation set (although it might vary a bit from run to run). . &quot;Fine-tuning&quot; a model means that we&#39;re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it&#39;s important, check out the free fast.ai course. . Step 3: Use our model (and build your own!) . Let&#39;s see what our model thinks about that bird we downloaded at the start: . is_hotdog,_,probs = learn.predict(PILImage.create(&#39;hotdog.jpg&#39;)) print(f&quot;This is a: {is_hotdog}.&quot;) print(f&quot;Probability it&#39;s a hotdog: {probs[0]:.4f}&quot;) . Good job, resnet18. :) . So, as you see, in the space of a few years, creating computer vision classification models has gone from &quot;so hard it&#39;s a joke&quot; to &quot;trivially easy and free&quot;! . It&#39;s not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including creating amazing artworks, and explaining jokes. It&#39;s moving so fast that even experts in the field have trouble predicting how it&#39;s going to impact society in the coming years. . One thing is clear -- it&#39;s important that we all do our best to understand this technology, because otherwise we&#39;ll get left behind! . Now it&#39;s your turn. Click &quot;Copy &amp; Edit&quot; and try creating your own image classifier using your own image searches! . If you enjoyed this, please consider clicking the &quot;upvote&quot; button in the top-right -- it&#39;s very encouraging to us notebook authors to know when people appreciate our work. .",
            "url": "https://meta-sean.github.io/anything/fastpages/jupyter/2022/08/22/not-hotdog.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/not-hotdog.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://meta-sean.github.io/anything/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://meta-sean.github.io/anything/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://meta-sean.github.io/anything/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://meta-sean.github.io/anything/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}